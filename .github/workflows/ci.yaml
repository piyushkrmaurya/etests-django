name: CI/CD Workflow

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint and Test Code
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: pip install -r requirements.txt black

      - name: Run Lint
        run: black --check .
        continue-on-error: true

      - name: Run Tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          python manage.py migrate
          python manage.py test

  build:
    name: Build and Push Docker Image
    environment: production
    runs-on: ubuntu-latest
    needs:
      - lint-and-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        run: docker --version

      - name: Build Docker Image
        run: |
          docker build -t ${{ vars.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

  deploy:
    name: Deploy to Production
    environment: production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker push ${{ vars.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy Application
        env:
          DOCKER_IMAGE: ${{ vars.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        run: |
          echo "Deploying $DOCKER_IMAGE"
