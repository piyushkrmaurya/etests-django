name: Push Workflow
on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
  TAG: ${{ github.sha }}

jobs:
  lint-and-test:
    name: Lint and Test Code
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: pip install -r requirements.txt black

      - name: Run Lint
        run: black --check .
        continue-on-error: true

      - name: Run Tests
        run: |
          python manage.py migrate
          python manage.py test

  build:
    name: Build and Push Docker Image
    environment: production
    runs-on: ubuntu-latest
    needs:
      - lint-and-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        run: docker --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$TAG .
          docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest

      - name: Push Docker Image
        run: |
          docker push $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:latest

  deploy:
    name: Update Image Tag
    environment: production
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set Image Tag
        run: |
          echo "image_tag=$TAG" >> $GITHUB_ENV

      - name: Update Image Tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.INFRA_WORKFLOW_TOKEN }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: "${{ vars.INFRA_REPO_NAME }}",
              event_type: "update-image-tag",
              client_payload: {
                image_tag: process.env.image_tag
              }
            })
